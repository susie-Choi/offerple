"""
Find the commit that introduced the vulnerability by searching for specific patterns.
"""
import os
from dotenv import load_dotenv
from neo4j import GraphDatabase
import re

load_dotenv()

NEO4J_URI = os.getenv("NEO4J_URI")
NEO4J_USERNAME = os.getenv("NEO4J_USERNAME")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD")

driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USERNAME, NEO4J_PASSWORD))

def search_commits_by_pattern(cve_id, patterns):
    """Search commits by message patterns."""
    with driver.session() as session:
        result = session.run("""
            MATCH (cve:CVE {id: $cve_id})-[:HAS_COMMIT]->(c:Commit)
            RETURN c.sha as sha,
                   c.date as date,
                   c.author as author,
                   c.message as message
            ORDER BY c.date
        """, cve_id=cve_id)
        
        commits = list(result)
        matching_commits = []
        
        for commit in commits:
            message_lower = commit['message'].lower()
            for pattern in patterns:
                if re.search(pattern, message_lower, re.IGNORECASE):
                    matching_commits.append({
                        'commit': commit,
                        'matched_pattern': pattern
                    })
                    break
        
        return matching_commits

def main():
    """Find vulnerability-introducing commits for CVE-2012-3503."""
    cve_id = "CVE-2012-3503"
    
    print("="*80)
    print(f"Searching for Vulnerability Origin: {cve_id}")
    print("="*80)
    
    # Patterns related to secret_token
    patterns = [
        r'secret[_\s]token',
        r'application\.config',
        r'session[_\s]secret',
        r'rails[_\s]secret',
        r'secret[_\s]key',
        r'install[_\s]script',
        r'katello[_\s]configure',
        r'initial[_\s]setup',
        r'configuration[_\s]generation'
    ]
    
    print("\nSearching for patterns:")
    for pattern in patterns:
        print(f"  - {pattern}")
    
    matching_commits = search_commits_by_pattern(cve_id, patterns)
    
    print(f"\n{'='*80}")
    print(f"Found {len(matching_commits)} matching commits")
    print(f"{'='*80}")
    
    for i, item in enumerate(matching_commits, 1):
        commit = item['commit']
        pattern = item['matched_pattern']
        
        print(f"\n{i}. {commit['sha'][:8]} - {commit['date']}")
        print(f"   Pattern: {pattern}")
        print(f"   Author: {commit['author']}")
        print(f"   Message:")
        for line in commit['message'].split('\n')[:5]:
            print(f"     {line}")
        if len(commit['message'].split('\n')) > 5:
            print(f"     ...")

if __name__ == "__main__":
    try:
        main()
    finally:
        driver.close()
