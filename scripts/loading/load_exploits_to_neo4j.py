"""Load Exploit-DB data into Neo4j."""
from __future__ import annotations

import argparse
import json
import logging
import os
from pathlib import Path

try:
    from neo4j import GraphDatabase
except ImportError:
    print("neo4j driver not installed. Run: pip install neo4j")
    exit(1)

from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)


class ExploitLoader:
    """Load exploits into Neo4j."""

    def __init__(self, uri: str, username: str, password: str):
        self.driver = GraphDatabase.driver(uri, auth=(username, password))

    def close(self):
        self.driver.close()

    def create_constraints(self):
        """Create uniqueness constraints."""
        with self.driver.session() as session:
            constraints = [
                "CREATE CONSTRAINT exploit_id IF NOT EXISTS FOR (e:Exploit) REQUIRE e.edb_id IS UNIQUE",
            ]
            for constraint in constraints:
                try:
                    session.run(constraint)
                    logger.info(f"Created constraint: {constraint}")
                except Exception as e:
                    logger.warning(f"Constraint may already exist: {e}")

    def load_exploit(self, exploit_data: dict, cve_id: str = None) -> None:
        """Load a single exploit into Neo4j."""
        edb_id = exploit_data.get("id")
        if not edb_id:
            return

        with self.driver.session() as session:
            # Create Exploit node
            session.run(
                """
                MERGE (e:Exploit {edb_id: $edb_id})
                SET e.description = $description,
                    e.date = date($date),
                    e.author = $author,
                    e.type = $type,
                    e.platform = $platform,
                    e.port = $port,
                    e.file = $file,
                    e.verified = $verified
                """,
                edb_id=edb_id,
                description=exploit_data.get("description"),
                date=exploit_data.get("date"),
                author=exploit_data.get("author"),
                type=exploit_data.get("type"),
                platform=exploit_data.get("platform"),
                port=exploit_data.get("port"),
                file=exploit_data.get("file"),
                verified=exploit_data.get("verified") == "1",
            )

            # Link to CVEs
            codes = exploit_data.get("codes", "")
            if codes:
                # codes can contain multiple CVE IDs separated by semicolons
                cve_ids = [c.strip() for c in codes.split(";") if c.strip().startswith("CVE-")]
                
                for cve in cve_ids:
                    session.run(
                        """
                        MATCH (e:Exploit {edb_id: $edb_id})
                        MERGE (c:CVE {id: $cve_id})
                        MERGE (c)-[:HAS_EXPLOIT]->(e)
                        """,
                        edb_id=edb_id,
                        cve_id=cve,
                    )

    def load_from_jsonl(self, jsonl_path: Path) -> None:
        """Load exploits from a JSONL file."""
        logger.info(f"Loading exploits from {jsonl_path}")
        count = 0

        with jsonl_path.open("r", encoding="utf-8") as f:
            for line in f:
                record = json.loads(line)
                payload = record.get("payload", {})
                exploits = payload.get("exploits", [])
                cve_id = payload.get("cve_id")

                for exploit in exploits:
                    try:
                        self.load_exploit(exploit, cve_id)
                        count += 1
                        if count % 100 == 0:
                            logger.info(f"Loaded {count} exploits...")
                    except Exception as e:
                        logger.error(f"Error loading exploit: {e}")

        logger.info(f"Finished loading {count} exploits")


def main():
    parser = argparse.ArgumentParser(description="Load Exploit-DB data into Neo4j")
    parser.add_argument("jsonl_file", type=Path, help="Path to exploits JSONL file")
    parser.add_argument("--uri", help="Neo4j URI")
    parser.add_argument("--username", help="Neo4j username")
    parser.add_argument("--password", help="Neo4j password")
    parser.add_argument("--log-level", default="INFO", help="Logging level")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log_level.upper()))

    # Get Neo4j credentials
    neo4j_uri = args.uri or os.getenv("NEO4J_URI", "bolt://localhost:7687")
    neo4j_username = args.username or os.getenv("NEO4J_USERNAME", "neo4j")
    neo4j_password = args.password or os.getenv("NEO4J_PASSWORD")
    
    if not neo4j_password:
        logger.error("Neo4j password required")
        return

    loader = ExploitLoader(neo4j_uri, neo4j_username, neo4j_password)
    try:
        logger.info("Creating constraints...")
        loader.create_constraints()
        loader.load_from_jsonl(args.jsonl_file)
    finally:
        loader.close()


if __name__ == "__main__":
    main()
