"""
과거 취약점 패턴 신호 추출 모듈
CVE 이력으로부터 위험 패턴 분석
"""
import json
import logging
from typing import Dict, List
from collections import Counter
from datetime import datetime, timedelta
import numpy as np

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class VulnerabilityPatternExtractor:
    """과거 취약점 패턴 신호 추출"""
    
    def __init__(self, cutoff_date: str):
        """
        Args:
            cutoff_date: 이 날짜 이전의 CVE만 분석 (YYYY-MM-DD)
        """
        self.cutoff_date = datetime.strptime(cutoff_date, "%Y-%m-%d")
    
    def extract_patterns(self, vulnerabilities_data: Dict[str, List[Dict]]) -> Dict[str, Dict]:
        """모든 패키지의 취약점 패턴 추출"""
        logger.info(f"총 {len(vulnerabilities_data)}개 패키지의 취약점 패턴 분석 시작")
        
        patterns = {}
        
        for package_name, cves in vulnerabilities_data.items():
            patterns[package_name] = self._analyze_package_vulnerabilities(package_name, cves)
        
        logger.info("취약점 패턴 추출 완료")
        return patterns
    
    def _analyze_package_vulnerabilities(self, package_name: str, cves: List[Dict]) -> Dict:
        """단일 패키지의 취약점 패턴 분석"""
        if not cves:
            return {
                "total_cves": 0,
                "critical_cves": 0,
                "high_cves": 0,
                "avg_cvss": 0.0,
                "vulnerability_types": {},
                "last_cve_days_ago": None,
                "cve_frequency_per_year": 0.0,
                "avg_time_between_cves": None,
                "trend": "none",
            }
        
        # 기본 통계
        total_cves = len(cves)
        cvss_scores = [cve["cvss_score"] for cve in cves if cve["cvss_score"] > 0]
        avg_cvss = np.mean(cvss_scores) if cvss_scores else 0.0
        
        # 심각도별 분류
        critical_cves = sum(1 for cve in cves if cve["cvss_score"] >= 9.0)
        high_cves = sum(1 for cve in cves if 7.0 <= cve["cvss_score"] < 9.0)
        
        # 취약점 유형 분포
        vuln_types = Counter(cve["vulnerability_type"] for cve in cves)
        
        # 시간 관련 분석
        cve_dates = sorted([
            datetime.strptime(cve["published_date"], "%Y-%m-%d")
            for cve in cves
            if cve["published_date"]
        ])
        
        last_cve_days_ago = None
        cve_frequency = 0.0
        avg_time_between = None
        trend = "none"
        
        if cve_dates:
            # 마지막 CVE로부터 경과 일수
            last_cve_days_ago = (self.cutoff_date - cve_dates[-1]).days
            
            # 연간 CVE 발생 빈도
            if len(cve_dates) > 1:
                time_span_years = (cve_dates[-1] - cve_dates[0]).days / 365.25
                if time_span_years > 0:
                    cve_frequency = len(cve_dates) / time_span_years
                
                # CVE 간 평균 시간 간격
                time_diffs = [(cve_dates[i+1] - cve_dates[i]).days 
                             for i in range(len(cve_dates)-1)]
                avg_time_between = np.mean(time_diffs) if time_diffs else None
                
                # 추세 분석 (최근 1년 vs 이전)
                one_year_ago = self.cutoff_date - timedelta(days=365)
                recent_cves = sum(1 for d in cve_dates if d >= one_year_ago)
                older_cves = len(cve_dates) - recent_cves
                
                if recent_cves > older_cves * 1.5:
                    trend = "increasing"
                elif recent_cves < older_cves * 0.5:
                    trend = "decreasing"
                else:
                    trend = "stable"
        
        return {
            "total_cves": total_cves,
            "critical_cves": critical_cves,
            "high_cves": high_cves,
            "avg_cvss": round(avg_cvss, 2),
            "vulnerability_types": dict(vuln_types),
            "last_cve_days_ago": last_cve_days_ago,
            "cve_frequency_per_year": round(cve_frequency, 2),
            "avg_time_between_cves": round(avg_time_between, 1) if avg_time_between else None,
            "trend": trend,
            "risk_score": self._calculate_risk_score(
                total_cves, critical_cves, avg_cvss, cve_frequency, trend
            ),
        }
    
    def _calculate_risk_score(
        self,
        total_cves: int,
        critical_cves: int,
        avg_cvss: float,
        cve_frequency: float,
        trend: str
    ) -> float:
        """과거 이력 기반 위험 점수 계산 (0-1)"""
        score = 0.0
        
        # CVE 빈도 (최대 5개/년 = 1.0)
        score += min(cve_frequency / 5.0, 1.0) * 0.3
        
        # Critical CVE 비율
        if total_cves > 0:
            score += (critical_cves / total_cves) * 0.3
        
        # 평균 CVSS 점수 (10점 만점)
        score += (avg_cvss / 10.0) * 0.3
        
        # 추세
        if trend == "increasing":
            score += 0.1
        elif trend == "stable" and total_cves > 0:
            score += 0.05
        
        return min(score, 1.0)


if __name__ == "__main__":
    # 사용 예시
    with open("data/raw/vulnerabilities.json", 'r') as f:
        vulnerabilities_data = json.load(f)
    
    extractor = VulnerabilityPatternExtractor(cutoff_date="2021-11-01")
    patterns = extractor.extract_patterns(vulnerabilities_data)
    
    # 결과 저장
    with open("data/processed/signals/vulnerability_patterns.json", 'w') as f:
        json.dump(patterns, f, indent=2)
    
    # 고위험 패키지 출력
    high_risk = {k: v for k, v in patterns.items() if v["risk_score"] > 0.5}
    print(f"고위험 패키지 {len(high_risk)}개 발견")
